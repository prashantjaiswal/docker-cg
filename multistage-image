Building Smaller Images with Multi-Stage Builds
Introduction
Containers are made of layers. Compile and install operations performed in the image, add to the layers, increasing the size of the container.

Instead of keeping all of those layers into the final image, you can split those steps off, and only use the finished product.

Docker provides this capability through multi-stage builds. In this lab, you will build an image the usual way, and inspect the image to see how it is put together. You'll then convert the Dockerfile to use Multi-Stage builds, and see how the new image compares.

Solution
Log in to the server using the credentials provided:

ssh cloud_user@<PUBLIC_IP_ADDRESS>
Do Prep Work in the Image
Change to the notes directory:
cd notes
Check the Dockerfile:
cat Dockerfile
Build an image using the file:
docker build -t notesapp:default .
Set a variable to view the layers of the image:
export showLayers='{{ range .RootFS.Layers }}{{ println . }}{{end}}'
Set a variable to show the size of the image:
export showSize='{{ .Size }}'
Show the image layers:
docker inspect -f "$showLayers" notesapp:default
Count the number of layers:
docker inspect -f "$showLayers" notesapp:default | wc -l
Show the size of the image:
docker inspect -f "$showSize" notesapp:default | numfmt --to=iec
Add a Build Stage
Open the Dockerfile:
vim Dockerfile
Add a build stage by adding the following:
FROM python:3 AS base
ENV PYBASE /pybase
ENV PYTHONUSERBASE $PYBASE
ENV PATH $PYBASE/bin:$PATH

FROM base AS builder
RUN pip install pipenv
WORKDIR /tmp
COPY Pipfile .
RUN pipenv lock
RUN PIP_USER=1 PIP_IGNORE_INSTALLED=1 pipenv install -d --system --ignore-pipfile

FROM base
COPY --from=builder /pybase /pybase
COPY . /app/notes
WORKDIR /app/notes
EXPOSE 80
CMD [ "flask", "run", "--port=80", "--host=0.0.0.0" ]
Save the file:
ESC
:wq
Create a Smaller Image
Build the image:
docker build -t notesapp:multistage .
Show the multistage image layers:
docker inspect -f "$showLayers" notesapp:multistage
Count the layers:
docker inspect -f "$showLayers" notesapp:multistage | wc -l
Show the size of the image:
docker inspect -f "$showSize" notesapp:multistage | numfmt --to=iec
